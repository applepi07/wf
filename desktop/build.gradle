apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.pipai.wf.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

project.ext.runDir = new File(projectDir, 'run/')

task cleanRunDir(type: Delete) {
    delete runDir
}

task copyAll(dependsOn: ['copyAssets', 'copyConfig'], type: Copy)

task copyAssets(type: Copy) {
    File assetsDir = runDir;
    assetsDir.mkdirs()
    from '../core/assets/'
    into assetsDir
}

task copyConfig(type: Copy) {
    File configDir = new File(runDir, 'config/');
    configDir.mkdirs()
    from '../core/config/'
    into configDir
}

task run(dependsOn: ['classes', 'cleanRunDir', 'copyAll'], type: JavaExec) {
    copyAll.mustRunAfter cleanRunDir
    
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = runDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}